// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> NoiseMap;
RWStructuredBuffer<uint> Permutations;

float fade(float t)
{
	// Fade function as defined by Ken Perlin.  This eases coordinate values
	// so that they will "ease" towards integral values.  This ends up smoothing
	// the final output.
	return t * t * t * (t * (t * 6 - 15) + 10);         // 6t^5 - 15t^4 + 10t^3
}

float lerp(float a, float b, float x)
{
	return a + x * (b - a);
}

float inverseLerp(float min, float max, float step)
{
	return (step - min) / (max - min);
}


float Map(float newmin, float newmax, float omin, float omax, float value)
{
	return lerp(newmin, newmax, inverseLerp(omin, omax, value));
}


uint inc(uint num)
{
	num++;
	return num;
}

float grad(uint hash, float x, float y, float z)
{
	uint h = hash & 15;                                  // Take the hashed value and take the first 4 bits of it (15 == 0b1111)
	float u = h < 8 /* 0b1000 */ ? x : y;              // If the most significant bit (MSB) of the hash is 0 then set u = x.  Otherwise y.

	float v;                                           // In Ken Perlin's original implementation this was another conditional operator (?:).  I
														// expanded it for readability.

	if (h < 4 /* 0b0100 */)                             // If the first and second significant bits are 0 set v = y
		v = y;
	else if (h == 12 /* 0b1100 */ || h == 14 /* 0b1110*/)// If the first and second significant bits are 1 set v = x
		v = x;
	else                                                // If the first and second significant bits are not equal (0/1, 1/0) set v = z
		v = z;

	return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v); // Use the last 2 bits to decide if u and v are positive or negative.  Then return their addition.
}

float perlin(float x, float y, float z)
{
	uint xi = (uint)x & 255;                              // Calculate the "unit cube" that the point asked will be located in
	uint yi = (uint)y & 255;                              // The left bound is ( |_x_|,|_y_|,|_z_| ) and the right bound is that
	uint zi = (uint)z & 255;                              // plus 1.  Next we calculate the location (from 0.0 to 1.0) in that cube.
	float xf = x - (uint)x;                             // We also fade the location to smooth the result.
	float yf = y - (uint)y;

	float zf = z - (uint)z;
	float u = fade(xf);
	float v = fade(yf);
	float w = fade(zf);

	uint aaa, aba, aab, abb, baa, bba, bab, bbb;
	aaa = Permutations[Permutations[Permutations[xi] + yi] + zi];
	aba = Permutations[Permutations[Permutations[xi] + inc(yi)] + zi];
	aab = Permutations[Permutations[Permutations[xi] + yi] + inc(zi)];
	abb = Permutations[Permutations[Permutations[xi] + inc(yi)] + inc(zi)];
	baa = Permutations[Permutations[Permutations[inc(xi)] + yi] + zi];
	bba = Permutations[Permutations[Permutations[inc(xi)] + inc(yi)] + zi];
	bab = Permutations[Permutations[Permutations[inc(xi)] + yi] + inc(zi)];
	bbb = Permutations[Permutations[Permutations[inc(xi)] + inc(yi)] + inc(zi)];

	float x1, x2, y1, y2;
	x1 = lerp(grad(aaa, xf, yf, zf),                // The gradient function calculates the dot product between a pseudorandom
		grad(baa, xf - 1, yf, zf),              // gradient vector and the vector from the input coordinate to the 8
		u);                                     // surrounding points in its unit cube.
	x2 = lerp(grad(aba, xf, yf - 1, zf),                // This is all then lerped together as a sort of weighted average based on the faded (u,v,w)
		grad(bba, xf - 1, yf - 1, zf),              // values we made earlier.
		u);
	y1 = lerp(x1, x2, v);

	x1 = lerp(grad(aab, xf, yf, zf - 1),
		grad(bab, xf - 1, yf, zf - 1),
		u);
	x2 = lerp(grad(abb, xf, yf - 1, zf - 1),
		grad(bbb, xf - 1, yf - 1, zf - 1),
		u);
	y2 = lerp(x1, x2, v);

	return (lerp(y1, y2, w) + 1) / 2;                       // For convenience we bound it to 0 - 1 (theoretical min/max before is -1 - 1)
}


float fBM(float x, float y, uint octaves, float persistence)
{
	float total = 0;
	float frequency = 0.5;
	float amplitude = 1;
	float maxValue = 0;

	for (uint i = 0; i < octaves; i++)
	{
		total += perlin(x * frequency, y * frequency, 1) * amplitude;
		maxValue += amplitude;
		amplitude *= persistence;
		frequency *= 2;
	}

	return total / maxValue;
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float smooth = 0.05;
	float persistence = 1;
	uint octaves = 3;

	// TODO: insert actual code here!
	NoiseMap[id.x * 64 + id.y] = fBM(id.x * smooth, id.y * smooth, octaves, persistence);
}

