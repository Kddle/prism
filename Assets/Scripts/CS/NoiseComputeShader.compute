// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> NoiseMap;
RWStructuredBuffer<uint> Permutations;

float lerp(float min, float max, float step)
{
	return min + step * (max - min);
}

float inverseLerp(float min, float max, float step)
{
	return (step - min) / (max - min);
}


float Map(float newmin, float newmax, float omin, float omax, float value)
{
	return lerp(newmin, newmax, inverseLerp(omin, omax, value));
}

uint FastFloor(float x)
{
	if (x > 0.0)
		return (uint)x;
	else
		return (uint)x - 1;
}

uint Mod(uint x, uint m)
{
	uint a = x % m;

	if (a < 0)
		return a + m;
	else
		return a;
}

float grad(uint hash, float x)
{
	uint h = hash & 15;
	float g = 1.0 + (h & 7);

	if ((h & 8) != 0)
		g = -g;

	return (g * x);
}

float grad(uint hash, float x, float y)
{
	uint h = hash & 7;
	float u = h < 4 ? x : y;
	float v = h < 4 ? y : x;

	return ((h & 1) != 0 ? -u : u) + ((h & 2) != 0 ? -2.0 * v : 2.0 * v);
}

float grad(uint hash, float x, float y, float z)
{
	uint h = hash & 15;
	float u = h < 8 ? x : y;
	float v = h < 4 ? y : h == 12 || h == 14 ? x : z;
	return ((h & 1) != 0 ? -u : u) + ((h & 2) != 0 ? -v : v);
}

float grad(uint hash, float x, float y, float z, float t)
{
	uint h = hash & 31;
	float u = h < 24 ? x : y;
	float v = h < 16 ? y : z;
	float w = h < 8 ? z : t;
	return ((h & 1) != 0 ? -u : u) + ((h & 2) != 0 ? -v : v) + ((h & 4) != 0 ? -w : w);
}

float GenerateSimplexNoise(float x)
{
	return 0;
}

float GenerateSimplexNoise(float x, float y)
{
	float F2 = 0.366025403;
	float G2 = 0.211324865;

	float n0, n1, n2;

	float s = (x + y) * F2;
	float xs = x + s;
	float ys = y + s;
	uint i = FastFloor(xs);
	uint j = FastFloor(ys);

	float t = (float)(i + j) * G2;
	float X0 = i - t;
	float Y0 = j - t;
	float x0 = x - X0;
	float y0 = y - Y0;

	uint i1, j1;

	if (x0 > y0) {
		i1 = 1;
		j1 = 0;
	}
	else {
		i1 = 0;
		j1 = 1;
	}

	float x1 = x0 - i1 + G2;
	float y1 = y0 - j1 + G2;
	float x2 = x0 - 1.0 + 2.0 * G2;
	float y2 = y0 - 1.0 + 2.0 * G2;

	uint ii = i % 256;
	uint jj = j % 256;

	float t0 = 0.5 - x0 * x0 - y0 * y0;

	if (t0 < 0.0)
	{
		n0 = 0.0;
	}
	else
	{
		t0 *= t0;
		n0 = t0 * t0 * grad(Permutations[ii + Permutations[jj]], x0, y0);
	}

	float t1 = 0.5 - x1 * x1 - y1 * y1;

	if (t1 < 0.0)
	{
		n1 = 0.0;
	}
	else
	{
		t1 *= t1;
		n1 = t1 * t1 * grad(Permutations[ii + i1 + Permutations[jj + j1]], x1, y1);
	}

	float t2 = 0.5 - x2 * x2 - y2 * y2;

	if (t2 < 0.0) {
		n2 = 0.0;
	}
	else
	{
		t2 *= t2;
		n2 = t2 * t2 * grad(Permutations[ii + 1 + Permutations[jj + 1]], x2, y2);
	}

	return 40.0 * (n0 + n1 + n2);
}

float GenerateSimplexNoise(float x, float y, float z)
{
	// Simple skewing factors for the 3D case
	const float F3 = 0.333333333;
	const float G3 = 0.166666667;

	float n0, n1, n2, n3; // Noise contributions from the four corners

	// Skew the input space to determine which simplex cell we're in
	float s = (x + y + z) * F3; // Very nice and simple skew factor for 3D
	float xs = x + s;
	float ys = y + s;
	float zs = z + s;
	uint i = FastFloor(xs);
	uint j = FastFloor(ys);
	uint k = FastFloor(zs);

	float t = (float)(i + j + k) * G3;
	float X0 = i - t; // Unskew the cell origin back to (x,y,z) space
	float Y0 = j - t;
	float Z0 = k - t;
	float x0 = x - X0; // The x,y,z distances from the cell origin
	float y0 = y - Y0;
	float z0 = z - Z0;

	// For the 3D case, the simplex shape is a slightly irregular tetrahedron.
	// Determine which simplex we are in.
	uint i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords
	uint i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords

	/* This code would benefit from a backport from the GLSL version! */
	if (x0 >= y0) {
		if (y0 >= z0)
		{
			i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;
		} // X Y Z order
		else if (x0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1; } // X Z Y order
		else { i1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1; } // Z X Y order
	}
	else { // x0<y0
		if (y0 < z0) { i1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1; } // Z Y X order
		else if (x0 < z0) { i1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1; } // Y Z X order
		else { i1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0; } // Y X Z order
	}

	// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),
	// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and
	// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where
	// c = 1/6.

	float x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords
	float y1 = y0 - j1 + G3;
	float z1 = z0 - k1 + G3;
	float x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords
	float y2 = y0 - j2 + 2.0 * G3;
	float z2 = z0 - k2 + 2.0 * G3;
	float x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords
	float y3 = y0 - 1.0 + 3.0 * G3;
	float z3 = z0 - 1.0 + 3.0 * G3;

	// Wrap the integer indices at 256, to avoid indexing Permutations[] out of bounds
	uint ii = Mod(i, 256);
	uint jj = Mod(j, 256);
	uint kk = Mod(k, 256);

	// Calculate the contribution from the four corners
	float t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
	if (t0 < 0.0) n0 = 0.0;
	else {
		t0 *= t0;
		n0 = t0 * t0 * grad(Permutations[ii + Permutations[jj + Permutations[kk]]], x0, y0, z0);
	}

	float t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
	if (t1 < 0.0) n1 = 0.0;
	else {
		t1 *= t1;
		n1 = t1 * t1 * grad(Permutations[ii + i1 + Permutations[jj + j1 + Permutations[kk + k1]]], x1, y1, z1);
	}

	float t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
	if (t2 < 0.0) n2 = 0.0;
	else {
		t2 *= t2;
		n2 = t2 * t2 * grad(Permutations[ii + i2 + Permutations[jj + j2 + Permutations[kk + k2]]], x2, y2, z2);
	}

	float t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
	if (t3 < 0.0) n3 = 0.0;
	else {
		t3 *= t3;
		n3 = t3 * t3 * grad(Permutations[ii + 1 + Permutations[jj + 1 + Permutations[kk + 1]]], x3, y3, z3);
	}

	// Add contributions from each corner to get the final noise value.
	// The result is scaled to stay just inside [-1,1]
	return 32.0 * (n0 + n1 + n2 + n3); // TODO: The scale factor is preliminary!
}

// Fractal Brownian Motion 1D
float fBM(float t, uint octaves, float persistence)
{
	float total = 0;
	float frequency = 1;
	float amplitude = 1;
	float maxValue = 0;

	for (uint i = 0; i < octaves; i++)
	{
		total += GenerateSimplexNoise(t * frequency, 1) * amplitude;
		maxValue += amplitude;
		amplitude *= persistence;
		frequency *= 2;
	}

	return total / maxValue;
}

// Fractal Brownian Motion 2D
float fBM(float x, float y, uint octaves, float persistence)
{
	float total = 0;
	float frequency = 5;
	float amplitude = 1;
	float maxValue = 0;

	for (uint i = 0; i < octaves; i++)
	{
		total += GenerateSimplexNoise(x * frequency, y * frequency) * amplitude;
		maxValue += amplitude;
		amplitude *= persistence;
		frequency *= 0.5;
	}

	return total / maxValue;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float smooth = 0.01;
	float persistence = 2;
	uint octaves = 3;

	NoiseMap[id.x * 64 + id.y] = Map(0, 1, -1, 1, fBM(id.x * smooth, id.y * smooth, octaves, persistence));
}

